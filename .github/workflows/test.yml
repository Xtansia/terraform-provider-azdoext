name: Tests
on:
  pull_request:
    paths-ignore:
    - 'README.md'
  push:
    paths-ignore:
    - 'README.md'
  # schedule:
  #   - cron: '0 13 * * *'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get dependencies
      run: go mod download
    - name: Build
      run: go build -v .

  checks:
    name: Go Checks
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Go Mod Tidy
      run: go mod tidy -v
    - name: Go Generate
      run: go generate -v ./...
    - name: Go Fmt
      run: gofmt -l -w .
    - name: Verify No Changes
      run: |
        if [[ -z $(git status --porcelain) ]]; then
          echo "Git directory is clean."
        else
          echo 'Git is dirty. Run `go mod tidy`, `go generate ./...` and `gofmt -w .` locally and commit any formatting fixes or generated code.'
          git status --porcelain
          exit 1
        fi

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Run linters
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.41

  test:
    name: Test
    needs: build
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        go-version: [ 1.17.x ]
        terraform-version: [ 0.12.31, 0.15.5, 1.0.2 ]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get dependencies
      run: go mod download
    - name: Run acceptance tests
      timeout-minutes: 10
      env:
        TF_ACC: "1"
        TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform-version }}
        AZDO_ORG_SERVICE_URL: ${{ secrets.AZDO_ORG_SERVICE_URL }}
        AZDO_PERSONAL_ACCESS_TOKEN: ${{ secrets.AZDO_PERSONAL_ACCESS_TOKEN }}
        AZDO_TEST_PROJECT_ID: ${{ secrets.AZDO_TEST_PROJECT_ID }}
      run: |
        go test -v -race -covermode=atomic -coverprofile=coverage.txt ./...
    - name: Upload to Codecov
      run: |
        bash <(curl -s https://codecov.io/bash)